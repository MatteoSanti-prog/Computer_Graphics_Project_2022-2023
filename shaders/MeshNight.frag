#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {	vec3 lightPos;	vec3 lightDir;	vec3 lightColorBrakes;	vec3 eyePos;} gubo;layout(set = 1, binding = 0) uniform UniformBufferObject {	float gamma;    float metallic;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(set = 1, binding = 1) uniform sampler2D tex;const float betaSpot = 2.0f;const float gSpot = 2.0f;const float cosout = 0.82;const float cosin  = 0.95;const float betaPoint = 3.0f;const float gPoint = 1.0f;void main() {	vec3 N = normalize(fragNorm);				            // surface normal	vec3 V = normalize(gubo.eyePos - fragPos);	            // viewer direction	vec3 L = normalize(gubo.lightPos - fragPos);			// light direction	/*Spot light*/	/*vec3(10.0f) is the vector of white light*/	vec3 lightSpot = vec3(10.0f) * pow(gSpot / length(gubo.lightPos - fragPos), betaSpot) * clamp((dot(L, normalize(gubo.lightDir)) - cosout) / (cosin - cosout), 0.0, 1.0);	/*Point light*/	vec3 lightPoint = gubo.lightColorBrakes.xyz * pow(gPoint / length(gubo.lightPos - fragPos), betaPoint);	vec3 albedo = texture(tex, fragUV).rgb;		// main color	vec3 MD = albedo;	vec3 MS = vec3(1.0f);	vec3 MA = albedo;	vec3 LA = vec3(0.02f);	/*Lambert diffusion model + Blinn reflection model*/	vec3 spotLight = clamp((MD * clamp(dot(L,N),0.0f,1.0f) +	ubo.metallic * MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma)) * lightSpot + LA * MA, 0.0f, 1.0f);	/*Lambert diffusion model + Blinn reflection model*/	vec3 pointLight = clamp((MD * clamp(dot(L,N),0.0f,1.0f) +	ubo.metallic * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma)) * lightPoint, 0.0f, 1.0f);		outColor = vec4(spotLight + pointLight, 1.0f);	// output color}