#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 0) uniform GlobalUniformBufferObjectGL {	vec3 GLDlightPos;	vec3 GLDlightDir;	vec3 GLDlightColor;	vec3 GLAmbLightColor;	vec3 GLeyePos;} gubo;layout(set = 1, binding = 0) uniform UniformBufferObject {	float amb;	float gamma;	vec3 sColor;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(set = 1, binding = 1) uniform sampler2D tex;const float beta = 2.0f;const float g = 1.5;const float cosout = 0.85;const float cosin  = 0.95;void main() {	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.GLeyePos - fragPos);	// viewer direction	vec3 L = normalize(gubo.GLDlightPos - fragPos);			// light direction	vec3 light = gubo.GLDlightColor.xyz * pow(g / length(gubo.GLDlightPos - fragPos), beta) * clamp((dot(L, normalize(gubo.GLDlightDir)) - cosout) / (cosin - cosout), 0.0, 1.0);	vec3 albedo = texture(tex, fragUV).rgb;		// main color	vec3 MD = albedo;	vec3 MS = ubo.sColor;	vec3 MA = albedo * ubo.amb;	vec3 LA = gubo.GLAmbLightColor;		// Write the shader here		outColor = vec4(				clamp((MD * clamp(dot(L,N),0.0f,1.0f) +					  MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma)) * light +					  LA * MA,				0.0f, 1.0f), 1.0f);	// output color	/*	vec3 Norm = normalize(fragNorm);	vec3 EyeDir = normalize(gubo.eyePos - fragPos);	vec3 lightDir = normalize(gubo.lightPos - fragPos);	vec3 lightColor = gubo.lightColor.xyz * pow(g / length(gubo.lightPos - fragPos), beta) * clamp((dot(lightDir, normalize(gubo.lightDir)) - cosout) / (cosin - cosout), 0.0, 1.0);	vec3 Diffuse = texture(tex, fragUV).rgb * 0.995f * clamp(dot(Norm, lightDir),0.0,1.0);	vec3 Specular = vec3(pow(clamp(dot(Norm, normalize(lightDir + EyeDir)),0.0,1.0), 160.0f));	vec3 Ambient = texture(tex, fragUV).rgb * 0.005f;	outColor = vec4(clamp((Diffuse + Specular) * lightColor.rgb + Ambient,0.0,1.0), 1.0f);	*/}