#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {	vec3 lightDir;	vec3 lightColor;	vec3 eyePos;} gubo;layout(set = 1, binding = 0) uniform UniformBufferObject {	float gamma;    float metallic;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(set = 1, binding = 1) uniform sampler2D tex;layout(set = 1, binding = 2) uniform sampler2D normMap;layout(set = 1, binding = 3) uniform sampler2D matMap;float ggx(vec3 N, vec3 A, float roughness) {	return 2 / (1 + pow(1 + pow(roughness, 2) * (1 - pow(clamp(dot(N, A), 0.000001f, 1.0), 2)) / pow(clamp(dot(N, A), 0.000001f, 1.0), 2), 0.5));}const float PI = 3.14159265359;vec3 BRDF(vec3 V, vec3 N, vec3 L, vec3 Md, float F0, float metallic, float roughness) {	vec3 diffuse = Md * max(dot(L, N), 0.0f);	float D = pow(roughness, 2) / (PI * pow(pow(clamp(dot(N, normalize(L + V)), 0.000001f, 1.0), 2) * (pow(roughness, 2) - 1) + 1, 2));	float F = F0 + (1 - F0) * pow(1 - clamp(dot(V, normalize(L + V)), 0.000001f, 1.0), 5);	float G = dot(ggx(N, V, roughness), ggx(N, L, roughness));	vec3 specular = vec3(1.0f) * D * F * G / (4 * clamp(dot(V, N), 0.000001f, 1.0));	return (1 - metallic) * diffuse + metallic * specular;}void main() {	vec3 N = normalize(fragNorm);	vec3 albedo = texture(tex, fragUV).rgb;	vec4 MRAO = texture(matMap, fragUV);	float roughness = MRAO.g; //Inizialmente la roughness era impostata nel seguente modo: MRAO.g;	float ao = MRAO.b;	float metallic = MRAO.r;	vec3 L = gubo.lightDir;	vec3 lightColor = gubo.lightColor.rgb;	vec3 V = normalize(gubo.eyePos - fragPos);	vec3 DiffSpec = BRDF(V, N, L, albedo, 1.5f, metallic, 0.15f); //inizialmente F0 era impostata a 0.3f	vec3 Ambient = albedo * 0.05f * ao;	outColor = vec4(clamp(0.95 * DiffSpec * lightColor.rgb + Ambient,0.0,1.0), 1.0f);}/*void main() {	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.eyePos - fragPos);	// viewer direction	//Direct light	vec3 L = normalize(gubo.lightDir);			// light direction	vec3 light = normalize(gubo.lightColor.rgb);	vec3 albedo = texture(tex, fragUV).rgb;		// main color	vec3 MD = albedo;	vec3 MS = vec3(1.0f);	vec3 MA = albedo;	vec3 LA = vec3(0.3f);	outColor = vec4(				//Lambert diffusion model				clamp((MD * clamp(dot(L,N),0.0f,1.0f) +				//Blinn reflectionf model				ubo.metallic * MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma)) * light +				LA * MA,				0.0f, 1.0f), 1.0f);	// output color}*/