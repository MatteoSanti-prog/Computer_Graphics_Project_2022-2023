#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 0) uniform GlobalUniformBufferObjectFree {	vec3 FreeDlightDir;	vec3 FreeDlightColor;	vec3 FreeAmbLightColor;	vec3 FreeEyePos;} gubo;layout(set = 1, binding = 0) uniform UniformBufferObject {	float amb;	float gamma;	vec3 sColor;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(set = 1, binding = 1) uniform sampler2D tex;void main() {	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.FreeEyePos - fragPos);	// viewer direction	vec3 L = normalize(gubo.FreeDlightDir);			// light direction	/*	Ho aggiunto questa parte (infatti la BRDF deve essere moltiplicata per la luce).	Noi non vedevamo alcuna differenza quando modificavamo il colore perché la luce non era	chiamata nello shader e di default è bianca)	*/	vec3 Light = normalize(gubo.FreeDlightColor);	vec3 albedo = texture(tex, fragUV).rgb;		// main color	vec3 MD = albedo;	vec3 MS = ubo.sColor;	vec3 MA = albedo * ubo.amb;	vec3 LA = gubo.FreeAmbLightColor;		// Write the shader here		outColor = vec4(				clamp((MD * clamp(dot(L,N),0.0f,1.0f) +					  MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma)) * Light +					  LA * MA,				0.0f, 1.0f), 1.0f);	// output color}